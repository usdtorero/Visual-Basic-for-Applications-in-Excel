'                             Online VB Compiler.
' Code, Compile, Run and Debug VB program online.' Write your code in this editor and press "Run" button to execute it.


Module VBModule
Sub FormatWorksheet()
    Dim rng As Range
    Dim InputRng As Range
    Dim savedCalcMode As XlCalculation
    savedCalcMode = Application.Calculation
    Application.Calculation = xlCalculationManual
    Dim savedScreenUpdating As Boolean
    savedScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    Dim savedEnableEvents As Boolean
    savedEnableEvents = Application.EnableEvents
    Application.EnableEvents = False
    Dim savedPageBrakes As Boolean
    savedPageBrakes = ActiveSheet.DisplayPageBreaks
    ActiveSheet.DisplayPageBreaks = False
    Dim savedEnableAnimations As Boolean
    savedEnableAnimations = Application.EnableAnimations
    Application.EnableAnimations = False
    Dim savedStatusBar As Boolean
    savedStatusBar = Application.DisplayStatusBar
    Application.DisplayStatusBar = False
    Dim savedPrintCommunication As Boolean
    savedPrintCommunication = Application.PrintCommunication
    Application.PrintCommunication = False
    
    xTitleId = "accessity"
    
    Set InputRng = Application.Selection
    Set InputRng = Application.InputBox("Range or type in A1:", xTitleId, InputRng.Address, Type:=8)
    Application.ScreenUpdating = False
    For i = InputRng.Columns.Count To 1 Step -1
        Set rng = InputRng.Cells(1, i).EntireColumn
        If Application.WorksheetFunction.CountA(rng) = 0 Then
            rng.Delete
        End If
    Next
    
    With ThisWorkbook.ActiveSheet
        .Unprotect
        .Range("A1").SpecialCells(xlCellTypeBlanks).Delete Shift:=xlUp
        .Range("1:1").Interior.Color = RGB(15, 20, 91)
        .Range("1:1").Font.Bold = True
        .Range("1:1").HorizontalAlignment = xlCenter
        .Range("A1").Activate
        .Cells.Font.Name = "Calibri Light"
        .Cells.Font.Size = 12
        .Cells.EntireColumn.AutoFit
        .Cells.WrapText = False
        .Cells.VerticalAlignment = xlCenter
        .Range("A1").AutoFilter
        .EnableSelection = xlNoSelection
        .Cells.Borders.LineStyle = xlLineStyleNone
        .Range("A:A").EntireColumn.Hidden = False
        .Range("A1", Range("A1").End(xlDown)).Sort Key1:=Range("A1"), Order1:=xlAscending, Header:=xlYes
        
    End With
    
    Application.Calculation = savedCalcMode
    Application.ScreenUpdating = savedScreenUpdating
    Application.EnableEvents = savedEnableEvents
    ActiveSheet.DisplayPageBreaks = savedPageBrakes
    Application.EnableAnimations = savedEnableAnimations
    Application.DisplayStatusBar = savedStatusBar
    Application.PrintCommunication = savedPrintCommunication
    ActiveWindow.Zoom = 65
    Application.WindowState = xlMaximized
    ActiveWindow.FreezePanes = True
    ActiveWindow.DisplayGridlines = False
    Application.ScreenUpdating = True
    MsgBox "Formatting complete."
End Sub

' Format Pie Charts 'https://www.automateexcel.com/vba/charts-graphs/
' https:			//medium.com/swlh/formatting-excel-graphs-using-vba-cae627f57818

Function URL (Hyperlink As Range)
  URL = Hyperlink.Hyperlinks (1).Address End Function Sub ListSheets ()
     Dim ws As
       Worksheet
       Dim
       x
       As
       Integer
   x = 1 Sheets ("Sheet1").Range ("A:A").Clear For Each ws In Worksheets Sheets ("Sheet1").Cells (x, 1) = ws.Name x = x + 1 Next ws End Sub Sub Merge_Multiple_Sheets_Column_Wise ()Dim Work_Sheets ()As String ReDim Work_Sheets (Sheets.Count) For i = 0 To Sheets.Count - 1 Work_Sheets (i) = Sheets (i + 1).Name Next i Sheets.Add.Name = "Combined Sheet" Dim Column_Index As Integer Dim Row_Index As Integer Row_Index = 0 For i = 0 To Sheets.Count - 2 Set rng = Worksheets (Work_Sheets (i)).UsedRange rng.Copy Worksheets ("Combined Sheet").Cells (Row_Index + 1, Column_Index).PasteSpecial Paste: = xlPasteAllUsingSourceTheme Row_Index = Row_Index + rng.Rows.Count + 1 Next i Application.CutCopyMode = False End Sub Private Sub NewMethod ()Column_Index = Worksheets (1).UsedRange.Cells (1, 1).Column End Sub Sub RemoveBreaks ()ActiveSheet.DisplayPageBreaks = False End Sub Public Sub PieCharts ()End Sub Sub DataLabels ()'Adding a Legend Using VBA
    ActiveChart.SetElement msoElementDataLabelBestFit
    
    ' Chart.SetElement method ActiveChart.SetElement msoElementLegendRight 'Changing the Chart Plot Area Color Using VBA
    ' ActiveChart.PlotArea.Format.Fill.ForeColor.RGB = RGB (208, 254, 202) 'Changing the Chart Background Color Using VBA
    ' ActiveChart.ChartArea.Format.Fill.ForeColor.RGB = RGB (253, 242, 227) 'ActiveChart.ChartArea.Interior.ColorIndex = 40
    
End Sub

' Autofit Columns Sub AutofitCols ()'PURPOSE: AutoFit Worksheet Columns (Multiple Scenarios)

    Dim sht As Worksheet
    ThisWorkbook.Worksheets("Sheet1").Cells.EntireColumn.AutoFit
    
    ' AutoFit One Column 'ThisWorkbook.Worksheets("Sheet1").Columns("O:O").EntireColumn.AutoFit
    
    ' AutoFit Multiple Columns 'ThisWorkbook.Worksheets("Sheet1").Range("I:I,L:L").EntireColumn.AutoFit ' Columns I & L 'AutoFit All Columns on Worksheet
    ' ThisWorkbook.Worksheets ("Sheet1").Cells.EntireColumn.AutoFit 'AutoFit Every Worksheet Column in a Workbook
    ' For Each sht In ThisWorkbook.Worksheets '    sht.Cells.EntireColumn.AutoFit
    ' Next sht 'AutoFit Every Worksheet Column in a Workbook (Visible Columns Only)
    ' On Error Resume Next 'For Each sht In ThisWorkbook.Worksheets
    ' sht.Cells.SpecialCells (xlCellTypeVisible).EntireColumn.AutoFit 'Next sht
    ' On Error GoTo 0 End Sub 'Password Remover


Sub RemoveProtection()

    Dim dialogBox As FileDialog
    Dim sourceFullName As String
    Dim sourceFilePath As String
    Dim sourceFileName As String
    Dim sourceFileType As String
    Dim newFileName As Variant
    Dim tempFileName As String
    Dim zipFilePath As Variant
    Dim oApp As Object
    Dim FSO As Object
    Dim xmlSheetFile As String
    Dim xmlFile As Integer
    Dim xmlFileContent As String
    Dim xmlStartProtectionCode As Double
    Dim xmlEndProtectionCode As Double
    Dim xmlProtectionString As String

    ' Open dialog box to select a file Set dialogBox = Application.FileDialog (msoFileDialogFilePicker) dialogBox.AllowMultiSelect = False dialogBox.Title = "Select file to remove protection from" If dialogBox.Show = -1 Then sourceFullName = dialogBox.SelectedItems (1) Else Exit Sub End If 'Get folder path, file type and file name from the sourceFullName
    sourceFilePath = Left(sourceFullName, InStrRev(sourceFullName, "\"))
    sourceFileType = Mid(sourceFullName, InStrRev(sourceFullName, ".") + 1)
    sourceFileName = Mid(sourceFullName, Len(sourceFilePath) + 1)
    sourceFileName = Left(sourceFileName, InStrRev(sourceFileName, ".") - 1)
    
    ' Use the date and time to create a unique file name tempFileName = "Temp" & Format (Now, " dd-mmm-yy h-mm-ss") 'Copy and rename original file to a zip file with a unique name
    newFileName = sourceFilePath & tempFileName & ".zip"
    On Error Resume Next
    FileCopy sourceFullName, newFileName
    
    If Err.Number <> 0 Then
        MsgBox "Unable to copy " & sourceFullName & vbNewLine _
             & "Check the file is closed and try again"
        Exit Sub
    End If
    On Error GoTo 0
    
    ' Create folder to unzip to zipFilePath = sourceFilePath & tempFileName & "\"
    MkDir zipFilePath
    
    'Extract the files into the newly created folder
    Set oApp = CreateObject(" Shell.Application ")
    oApp.Namespace(zipFilePath).CopyHere oApp.Namespace(newFileName).items
    
    'loop through each file in the \xl\worksheets folder of the unzipped file
    xmlSheetFile = Dir(zipFilePath & " \ xl \ worksheets \ *.xml * ")
    Do While xmlSheetFile <> " "
        
        'Read text of the file to a variable
        xmlFile = FreeFile
        Open zipFilePath & " xl \ worksheets \ " & xmlSheetFile For Input As xmlFile
        xmlFileContent = Input(LOF(xmlFile), xmlFile)
        Close xmlFile
        
        'Manipulate the text in the file
        xmlStartProtectionCode = 0
        xmlStartProtectionCode = InStr(1, xmlFileContent, " < sheetProtection ")
        
        If xmlStartProtectionCode > 0 Then
            
            xmlEndProtectionCode = InStr(xmlStartProtectionCode, _
            xmlFileContent, " / >") + 2             '" / >" is 2 characters long
            xmlProtectionString = Mid(xmlFileContent, xmlStartProtectionCode, _
                                   xmlEndProtectionCode - xmlStartProtectionCode)
            xmlFileContent = Replace(xmlFileContent, xmlProtectionString, " ")
            
        End If
        
        'Output the text of the variable to the file
        xmlFile = FreeFile
        Open zipFilePath & " xl \ worksheets \ " & xmlSheetFile For Output As xmlFile
        Print #xmlFile, xmlFileContent
        Close xmlFile
        
        'Loop to next xmlFile in directory
        xmlSheetFile = Dir
        
    Loop
    
    'Read text of the xl\workbook.xml file to a variable
    xmlFile = FreeFile
    Open zipFilePath & " xl \ workbook.xml " For Input As xmlFile
    xmlFileContent = Input(LOF(xmlFile), xmlFile)
    Close xmlFile
    
    'Manipulate the text in the file to remove the workbook protection
    xmlStartProtectionCode = 0
    xmlStartProtectionCode = InStr(1, xmlFileContent, " < workbookProtection ")
    If xmlStartProtectionCode > 0 Then
        
        xmlEndProtectionCode = InStr(xmlStartProtectionCode, _
        xmlFileContent, " / >") + 2                 ''" / >" is 2 characters long
        xmlProtectionString = Mid(xmlFileContent, xmlStartProtectionCode, _
                               xmlEndProtectionCode - xmlStartProtectionCode)
        xmlFileContent = Replace(xmlFileContent, xmlProtectionString, " ")
        
    End If
    
    'Manipulate the text in the file to remove the modify password
    xmlStartProtectionCode = 0
    xmlStartProtectionCode = InStr(1, xmlFileContent, " < fileSharing ")
    If xmlStartProtectionCode > 0 Then
        
        xmlEndProtectionCode = InStr(xmlStartProtectionCode, xmlFileContent, _
        " / >") + 2                                 ''" / >" is 2 characters long
        xmlProtectionString = Mid(xmlFileContent, xmlStartProtectionCode, _
                               xmlEndProtectionCode - xmlStartProtectionCode)
        xmlFileContent = Replace(xmlFileContent, xmlProtectionString, " ")
        
    End If
    
    'Output the text of the variable to the file
    xmlFile = FreeFile
    Open zipFilePath & " xl \ workbook.xml " & xmlSheetFile For Output As xmlFile
    Print #xmlFile, xmlFileContent
    Close xmlFile
    
    'Create empty Zip File
    Open sourceFilePath & tempFileName & ".zip " For Output As #1
    Print #1, Chr$(80) & Chr$(75) & Chr$(5) & Chr$(6) & String(18, 0)
    Close #1
    
    'Move files into the zip file
    oApp.Namespace(sourceFilePath & tempFileName & ".zip ").CopyHere _
                                  oApp.Namespace(zipFilePath).items
    'Keep script waiting until Compressing is done
    On Error Resume Next
    Do Until oApp.Namespace(sourceFilePath & tempFileName & ".zip ").items.Count = _
       oApp.Namespace(zipFilePath).items.Count
        Application.Wait (Now + TimeValue(" 0: 00:01 "))
    Loop
    On Error GoTo 0
    
    'Delete the files & folders created during the sub
    Set FSO = CreateObject(" scripting.filesystemobject ")
    FSO.deletefolder sourceFilePath & tempFileName
    
    'Rename the final file back to an xlsx file
    Name sourceFilePath & tempFileName & ".zip " As sourceFilePath & sourceFileName _
       & " _" & Format(Now, " dd - mmm - yy h - mm - ss ") & "." & sourceFileType
    
    'Show message box
    MsgBox " The workbook and worksheet protection passwords have been removed.", _
           vbInformation + vbOKOnly, Title:=" Password protection "
    
End Sub

'https://www.automateexcel.com/vba/unprotect-protect-worksheets/

'Protect Sheet Allow VBA to Make Changes
'UserInterFaceOnly setting. When TRUE, worksheets will ONLY be protected from users, NOT from VBA.
'Your VBA code will be free to edit the worksheet just like if it was unlocked.

Sub CustomProtect()
    Dim ws As Worksheet

    For Each ws In Worksheets
        ws.Protect UserInterfaceOnly:=True
    Next ws
End Sub

'Unprotect All Sheets Macro
'This Macro will unprotect all Sheets in a workbook:
' UnProtect All Worksheets
Sub UnprotectAll()
    Dim ws As Worksheet

    For Each ws In Worksheets
        ws.Unprotect
    Next ws
    
End Sub

'Protect All Sheets Macro
'This Macro will protect all Sheets in a Workbook:
' Protect All Worksheets
Sub ProtectAll()
    Dim ws As Worksheet

    For Each ws In Worksheets
        ws.Protect
    Next ws
End Sub

Sub showAllPrecedents()
    Dim cell As Range
    For Each cell In Selection
        cell.ShowPrecedents
    Next cell
End Sub

Sub showAllDependents()
    Dim cell As Range
    For Each cell In Selection
        cell.ShowDependents
    Next cell
End Sub

'Protect Sheet Allow VBA to Make Changes
'By default, when you protect a sheet, the protection applies to VBA operations in addition to user actions
'If VBA attempts to modify a locked cell, you will see a runtime error 1004
'To avoid this, you could unprotect and re-protect your worksheets whenever VBA needs to interact with them

'Sub Edit_Sheet1()
'Unprotect Sheet1
'Worksheets(" Sheet1 ").Unprotect
'
'Do Something to Sheet1
'X
'
'Reprotect Sheet1
'Worksheets(" Sheet1 ").Protect
'End Sub


'Workbook_Open is a special event procedure that will run each time the workbook is open
'It must be placed in the ThisWorkbook module
'Alternatively, you could use the Auto_Open event procedure (not covered here)

'Sub RoundCells()
'Dim rng  As Range
'    For Each rng In Selection
'        rng.Value = " = Round (" & Mid(rng.Formula, 2, 9999) & ", 2) "
'    Next rng
'
'End Sub
'
'Function getComment(xCell As Range) As String
'On Error Resume Next
'getComment = xCell.Comment.Text
'End Function
'
'Sub ProcedureName(Parameters)
'[Tasks that need to be done]
'End Sub

'Select Cells and Run Macro to Add Round Function to All Cells

Sub RoundPercents()
    Dim rgCell As Range
    For Each rgCell In Selection
        If rgCell.HasFormula Then
            rgCell.Formula = " = round (" & Mid(rgCell.Formula, 2) & ", 3) "
        End If
    Next rgCell
    
End Sub

Sub Remove_Round()
    Dim rng As Range, formulasRange As Range
    Dim theFormula As String

    On Error Resume Next
    If Selection.Cells.Count > 1 Then
        Set formulasRange = Selection.SpecialCells(xlCellTypeFormulas)
    Else
        Set formulasRange = Selection
    End If
    On Error GoTo 0
    
    If Not formulasRange Is Nothing Then
        Application.ScreenUpdating = False
        For Each rng In formulasRange.Cells
            theFormula = rng.Formula
            If UCase$(Left$(theFormula, 7)) = " = ROUND (" Then
                theFormula = " = " & Mid(rng.Formula, 8)
                theFormula = Left$(theFormula, InStrRev(theFormula, ", ") - 1)
                rng.Formula = theFormula
            End If
        Next rng
    End If
End Sub

Sub Merge_Sheets()

    Dim Work_Sheets() As String
    ReDim Work_Sheets(Sheets.Count)
    
    For i = 0 To Sheets.Count - 1
        Work_Sheets(i) = Sheets(i + 1).Name
    Next i
    
    Sheets.Add.Name = " Combined Sheet "
    
    Dim Column_Index As Integer
    Column_Index = Worksheets(1).UsedRange.Cells(1, 1).Column
    
    Dim Row_Index As Integer
    Row_Index = 0
    
    For i = 0 To Sheets.Count - 2
        Set rng = Worksheets(Work_Sheets(i)).UsedRange
        rng.Copy
        Worksheets(" Combined Sheet ").Cells(Row_Index + 1, Column_Index).PasteSpecial Paste:=xlPasteAllUsingSourceTheme
        Row_Index = Row_Index + rng.Rows.Count + 1
    Next i
    
    Application.CutCopyMode = False
    
End Sub

Sub RoundCurrency()
    Dim rgCell As Range
    For Each rgCell In Selection
        If rgCell.HasFormula Then
            rgCell.Formula = " = round (" & Mid(rgCell.Formula, 2) & ", 2) "
        End If
    Next rgCell
    
End Sub
End Module